// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name OSB
import AdSupport
import CoreLocation
import Foundation
import Swift
import SystemConfiguration
import UIKit
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public var ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static var reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (OSB.Reachability) -> ()
  public typealias NetworkUnreachable = (OSB.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable
    case reachableViaWiFi
    case reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: OSB.Reachability.NetworkStatus, b: OSB.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none
    case wifi
    case cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: OSB.Reachability.Connection, b: OSB.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: OSB.Reachability.NetworkReachable?
  public var whenUnreachable: OSB.Reachability.NetworkUnreachable?
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: OSB.Reachability.Connection {
    get
  }
  public var connection: OSB.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  public convenience init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  public convenience init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum OSBEventType : Swift.String {
  case ids
  case social
  case event
  case action
  case exception
  case pageview
  case screenview
  case timing
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum OSBError : Swift.Error {
  case notInitialised
  public static func == (a: OSB.OSBError, b: OSB.OSBError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class OSB {
  public static var instance: OSB.OSB
  public func clear()
  public func create(accountId: Swift.String, url: Swift.String)
  public func create(accountId: Swift.String, url: Swift.String, siteId: Swift.String)
  public func debug(_ bDebugMode: Swift.Bool)
  public func set(name: Swift.String, data: [Swift.String : Any])
  public func set(data: [Swift.String : Any])
  public func sendPageView(url: Swift.String, title: Swift.String) throws
  public func sendPageView(url: Swift.String, title: Swift.String, referrer: Swift.String) throws
  public func sendPageView(url: Swift.String, title: Swift.String, referrer: Swift.String, data: [Swift.String : Any]) throws
  public func sendScreenView(screenName: Swift.String) throws
  public func sendScreenView(screenName: Swift.String, data: [Swift.String : Any]) throws
  public func sendEvent(category: Swift.String) throws
  public func sendEvent(category: Swift.String, action: Swift.String) throws
  public func sendEvent(category: Swift.String, action: Swift.String, label: Swift.String) throws
  public func sendEvent(category: Swift.String, action: Swift.String, label: Swift.String, value: Swift.String) throws
  public func sendEvent(category: Swift.String, action: Swift.String, label: Swift.String, value: Swift.String, data: [Swift.String : Any]) throws
  public func send(type: OSB.OSBEventType) throws
  public func send(type: OSB.OSBEventType, data: [Swift.String : Any]) throws
  public func send(type: OSB.OSBEventType, actionType: Swift.String, data: [Swift.String : Any]) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ApiQueue {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JsonGenerator {
  public func generateJsonResponse() -> Swift.String?
  @objc deinit
}
